!function(){function e(e,n,o){var t={restrict:"A",require:["?ngModel","?mailcheck"],scope:{},bindToController:{options:"="},controller:function(){},controllerAs:"MC",link:function(n,t,i,a){function l(e,n){var o;for(o in n)n.hasOwnProperty(o)&&e[o]&&e[o].length&&(e[o]=n[o].concat(e[o]));return e}var r=/email|search|text/i;if(!i.ngModel)throw new Error("element must contain ng-model attribute");if("INPUT"!==t[0].nodeName||r.test(i.type))throw new Error("mailcheck element is limited to text, email, search input types only");var s,c=a[0],m=a[1],u=null,d=m.options.templateStr||'<p ng-show="MC.suggestion.domain">Did you mean <b ng-click="MC.correctMe(MC.suggestion.full)"><i ng-bind="MC.suggestion.full"></i></b>?</p>',h={templateStr:d,replaceOptions:!0},f=angular.extend({},h,m.options);f.replaceOptions||(s={domains:o.defaultDomains,secondLevelDomains:o.defaultSecondLevelDomains,topLevelDomains:o.defaultTopLevelDomains},f=angular.extend({},h,l(m.options,s))),m.suggestion=!1,t.after(e(f.templateStr)(n)),t.on("blur",function(){f.email=c.$viewValue,m.suggestion=!1,u=o.run(f),n.$evalAsync(function(){m.suggestion=u})}),m.correctMe=function(e){c.$setViewValue(e),c.$render(),n.$evalAsync(function(){m.suggestion.domain=null})}}};return t}e.$inject=["$compile","$timeout","mailcheckFactory"],angular.module("ngMailcheck",[]).directive("mailcheck",e)}(),function(){function e(){var e={domainThreshold:2,secondLevelThreshold:2,topLevelThreshold:2,defaultDomains:["msn.com","bellsouth.net","telus.net","comcast.net","optusnet.com.au","earthlink.net","qq.com","sky.com","icloud.com","mac.com","sympatico.ca","googlemail.com","att.net","xtra.co.nz","web.de","cox.net","gmail.com","ymail.com","aim.com","rogers.com","verizon.net","rocketmail.com","google.com","optonline.net","sbcglobal.net","aol.com","me.com","btinternet.com","charter.net","shaw.ca"],defaultSecondLevelDomains:["yahoo","hotmail","mail","live","outlook","gmx"],defaultTopLevelDomains:["com","com.au","com.tw","ca","co.nz","co.uk","de","fr","it","ru","net","org","edu","gov","jp","nl","kr","se","eu","ie","co.il","us","at","be","dk","hk","es","gr","ch","no","cz","in","net","net.au","info","biz","mil","co.jp","sg","hu","uk"],run:function(n){n.domains=n.domains||e.defaultDomains,n.secondLevelDomains=n.secondLevelDomains||e.defaultSecondLevelDomains,n.topLevelDomains=n.topLevelDomains||e.defaultTopLevelDomains,n.distanceFunction=n.distanceFunction||e.sift4Distance;var o=function(e){return e},t=(n.suggested||o,n.empty||o,e.suggest(e.encodeEmail(n.email),n.domains,n.secondLevelDomains,n.topLevelDomains,n.distanceFunction));return t},suggest:function(e,n,o,t,i){e=e.toLowerCase();var a=this.splitEmail(e);if(o&&t&&o.indexOf(a.secondLevelDomain)!==-1&&t.indexOf(a.topLevelDomain)!==-1)return!1;var l=this.findClosestDomain(a.domain,n,i,this.domainThreshold);if(l)return l!=a.domain&&{address:a.address,domain:l,full:a.address+"@"+l};var r=this.findClosestDomain(a.secondLevelDomain,o,i,this.secondLevelThreshold),s=this.findClosestDomain(a.topLevelDomain,t,i,this.topLevelThreshold);if(a.domain){l=a.domain;var c=!1;if(r&&r!=a.secondLevelDomain&&(l=l.replace(a.secondLevelDomain,r),c=!0),s&&s!=a.topLevelDomain&&""!==a.secondLevelDomain&&(l=l.replace(new RegExp(a.topLevelDomain+"$"),s),c=!0),c)return{address:a.address,domain:l,full:a.address+"@"+l}}return!1},findClosestDomain:function(e,n,o,t){t=t||this.topLevelThreshold;var i,a=1/0,l=null;if(!e||!n)return!1;o||(o=this.sift4Distance);for(var r=0;r<n.length;r++){if(e===n[r])return e;i=o(e,n[r]),i<a&&(a=i,l=n[r])}return a<=t&&null!==l&&l},sift4Distance:function(e,n,o){if(void 0===o&&(o=5),!e||!e.length)return n?n.length:0;if(!n||!n.length)return e.length;for(var t=e.length,i=n.length,a=0,l=0,r=0,s=0,c=0,m=[];a<t&&l<i;){if(e.charAt(a)==n.charAt(l)){s++;for(var u=!1,d=0;d<m.length;){var h=m[d];if(a<=h.c1||l<=h.c2){u=Math.abs(l-a)>=Math.abs(h.c2-h.c1),u?c++:h.trans||(h.trans=!0,c++);break}a>h.c2&&l>h.c1?m.splice(d,1):d++}m.push({c1:a,c2:l,trans:u})}else{r+=s,s=0,a!=l&&(a=l=Math.min(a,l));for(var f=0;f<o&&(a+f<t||l+f<i);f++){if(a+f<t&&e.charAt(a+f)==n.charAt(l)){a+=f-1,l--;break}if(l+f<i&&e.charAt(a)==n.charAt(l+f)){a--,l+=f-1;break}}}a++,l++,(a>=t||l>=i)&&(r+=s,s=0,a=l=Math.min(a,l))}return r+=s,Math.round(Math.max(t,i)-r+c)},splitEmail:function(e){e=null!==e?e.replace(/^\s*/,"").replace(/\s*$/,""):null;var n=e.split("@");if(n.length<2)return!1;for(var o=0;o<n.length;o++)if(""===n[o])return!1;var t=n.pop(),i=t.split("."),a="",l="";if(0===i.length)return!1;if(1==i.length)l=i[0];else{a=i[0];for(var r=1;r<i.length;r++)l+=i[r]+".";l=l.substring(0,l.length-1)}return{topLevelDomain:l,secondLevelDomain:a,domain:t,address:n.join("@")}},encodeEmail:function(e){var n=encodeURI(e);return n=n.replace("%20"," ").replace("%25","%").replace("%5E","^").replace("%60","`").replace("%7B","{").replace("%7C","|").replace("%7D","}")}};return e}e.$inject=[],angular.module("ngMailcheck").factory("mailcheckFactory",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

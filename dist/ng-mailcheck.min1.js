!function(){function e(e,n,o){var t={restrict:"A",require:["?ngModel","?mailcheck"],scope:{},bindToController:{options:"="},controller:function(){},controllerAs:"MC",link:function(n,t,i,l){function a(e,n){var o;for(o in n)n.hasOwnProperty(o)&&e[o]&&e[o].length&&(e[o]=n[o].concat(e[o]));return e}var c,r=l[0],u=l[1],s=null,g=u.options.templateStr||'<p ng-show="MC.suggestion.domain">Did you mean <b ng-click="MC.correctMe(MC.suggestion.full)"><i ng-bind="MC.suggestion.full"></i></b>?</p>',m={templateStr:g,replaceOptions:!0},p=angular.extend({},m,u.options);p.replaceOptions||(c={domains:o.defaultDomains,secondLevelDomains:o.defaultSecondLevelDomains,topLevelDomains:o.defaultTopLevelDomains},p=angular.extend({},m,a(u.options,c))),u.suggestion=!1,t.after(e(p.templateStr)(n)),t.on("blur",function(){p.email=r.$viewValue,u.suggestion=!1,s=o.run(p),n.$evalAsync(function(){u.suggestion=s})}),u.correctMe=function(e){r.$setViewValue(e),r.$render(),n.$evalAsync(function(){u.suggestion.domain=null})}}};return t}e.$inject=["$compile","$timeout","mailcheckFactory"],angular.module("ngMailcheck",[]).directive("mailcheck",e)}();
!function(){function e(){var e={domainThreshold:2,secondLevelThreshold:2,topLevelThreshold:2,defaultDomains:["msn.com","bellsouth.net","telus.net","comcast.net","optusnet.com.au","earthlink.net","qq.com","sky.com","icloud.com","mac.com","sympatico.ca","googlemail.com","att.net","xtra.co.nz","web.de","cox.net","gmail.com","ymail.com","aim.com","rogers.com","verizon.net","rocketmail.com","google.com","optonline.net","sbcglobal.net","aol.com","me.com","btinternet.com","charter.net","shaw.ca"],defaultSecondLevelDomains:["yahoo","hotmail","mail","live","outlook","gmx"],defaultTopLevelDomains:["com","com.au","com.tw","ca","co.nz","co.uk","de","fr","it","ru","net","org","edu","gov","jp","nl","kr","se","eu","ie","co.il","us","at","be","dk","hk","es","gr","ch","no","cz","in","net","net.au","info","biz","mil","co.jp","sg","hu","uk"],run:function(n){n.domains=n.domains||e.defaultDomains,n.secondLevelDomains=n.secondLevelDomains||e.defaultSecondLevelDomains,n.topLevelDomains=n.topLevelDomains||e.defaultTopLevelDomains,n.distanceFunction=n.distanceFunction||e.sift4Distance;var o=function(e){return e},t=(n.suggested||o,n.empty||o,e.suggest(e.encodeEmail(n.email),n.domains,n.secondLevelDomains,n.topLevelDomains,n.distanceFunction));return t},suggest:function(e,n,o,t,a){e=e.toLowerCase();var i=this.splitEmail(e);if(o&&t&&o.indexOf(i.secondLevelDomain)!==-1&&t.indexOf(i.topLevelDomain)!==-1)return!1;var l=this.findClosestDomain(i.domain,n,a,this.domainThreshold);if(l)return l!=i.domain&&{address:i.address,domain:l,full:i.address+"@"+l};var r=this.findClosestDomain(i.secondLevelDomain,o,a,this.secondLevelThreshold),s=this.findClosestDomain(i.topLevelDomain,t,a,this.topLevelThreshold);if(i.domain){l=i.domain;var c=!1;if(r&&r!=i.secondLevelDomain&&(l=l.replace(i.secondLevelDomain,r),c=!0),s&&s!=i.topLevelDomain&&""!==i.secondLevelDomain&&(l=l.replace(new RegExp(i.topLevelDomain+"$"),s),c=!0),c)return{address:i.address,domain:l,full:i.address+"@"+l}}return!1},findClosestDomain:function(e,n,o,t){t=t||this.topLevelThreshold;var a,i=1/0,l=null;if(!e||!n)return!1;o||(o=this.sift4Distance);for(var r=0;r<n.length;r++){if(e===n[r])return e;a=o(e,n[r]),a<i&&(i=a,l=n[r])}return i<=t&&null!==l&&l},sift4Distance:function(e,n,o){if(void 0===o&&(o=5),!e||!e.length)return n?n.length:0;if(!n||!n.length)return e.length;for(var t=e.length,a=n.length,i=0,l=0,r=0,s=0,c=0,m=[];i<t&&l<a;){if(e.charAt(i)==n.charAt(l)){s++;for(var d=!1,u=0;u<m.length;){var h=m[u];if(i<=h.c1||l<=h.c2){d=Math.abs(l-i)>=Math.abs(h.c2-h.c1),d?c++:h.trans||(h.trans=!0,c++);break}i>h.c2&&l>h.c1?m.splice(u,1):u++}m.push({c1:i,c2:l,trans:d})}else{r+=s,s=0,i!=l&&(i=l=Math.min(i,l));for(var f=0;f<o&&(i+f<t||l+f<a);f++){if(i+f<t&&e.charAt(i+f)==n.charAt(l)){i+=f-1,l--;break}if(l+f<a&&e.charAt(i)==n.charAt(l+f)){i--,l+=f-1;break}}}i++,l++,(i>=t||l>=a)&&(r+=s,s=0,i=l=Math.min(i,l))}return r+=s,Math.round(Math.max(t,a)-r+c)},splitEmail:function(e){e=null!==e?e.replace(/^\s*/,"").replace(/\s*$/,""):null;var n=e.split("@");if(n.length<2)return!1;for(var o=0;o<n.length;o++)if(""===n[o])return!1;var t=n.pop(),a=t.split("."),i="",l="";if(0===a.length)return!1;if(1==a.length)l=a[0];else{i=a[0];for(var r=1;r<a.length;r++)l+=a[r]+".";l=l.substring(0,l.length-1)}return{topLevelDomain:l,secondLevelDomain:i,domain:t,address:n.join("@")}},encodeEmail:function(e){var n=encodeURI(e);return n=n.replace("%20"," ").replace("%25","%").replace("%5E","^").replace("%60","`").replace("%7B","{").replace("%7C","|").replace("%7D","}")}};return e}e.$inject=[],angular.module("ngMailcheck").factory("mailcheckFactory",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
